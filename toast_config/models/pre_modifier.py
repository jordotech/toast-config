# coding: utf-8

"""
    Toast Configuration API

    ## Overview    You can use the Toast configuration API to retrieve information about   the configuration of a restaurant and its menus. This includes   menu items, menu groups, and alternate payment types, as well as   physical configuration such as cash drawers and restaurant   tables.    The configuration API does not return information about entities   that you have removed from your restaurant configuration or   archived. For example, if you remove a menu item or archive a   discount, the configuration API will not return the menu item or   discount in response data.    For more information about using this and other Toast APIs, see   the <cite>Toast API Developer's Guide.</cite> 

    OpenAPI spec version: 2.2.0
    Contact: integrations@toasttab.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PreModifier(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'guid': 'str',
        'entity_type': 'str',
        'name': 'str',
        'scale_price': 'bool',
        'base_price': 'float',
        'scale_factor': 'float',
        'display_mode': 'str',
        'parent': 'ToastReference'
    }

    attribute_map = {
        'guid': 'guid',
        'entity_type': 'entityType',
        'name': 'name',
        'scale_price': 'scalePrice',
        'base_price': 'basePrice',
        'scale_factor': 'scaleFactor',
        'display_mode': 'displayMode',
        'parent': 'parent'
    }

    def __init__(self, guid=None, entity_type=None, name=None, scale_price=None, base_price=None, scale_factor=None, display_mode=None, parent=None):
        """
        PreModifier - a model defined in Swagger
        """

        self._guid = None
        self._entity_type = None
        self._name = None
        self._scale_price = None
        self._base_price = None
        self._scale_factor = None
        self._display_mode = None
        self._parent = None

        self.guid = guid
        self.entity_type = entity_type
        if name is not None:
          self.name = name
        if scale_price is not None:
          self.scale_price = scale_price
        if base_price is not None:
          self.base_price = base_price
        if scale_factor is not None:
          self.scale_factor = scale_factor
        if display_mode is not None:
          self.display_mode = display_mode
        if parent is not None:
          self.parent = parent

    @property
    def guid(self):
        """
        Gets the guid of this PreModifier.
        The GUID maintained by the Toast POS.

        :return: The guid of this PreModifier.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """
        Sets the guid of this PreModifier.
        The GUID maintained by the Toast POS.

        :param guid: The guid of this PreModifier.
        :type: str
        """
        if guid is None:
            raise ValueError("Invalid value for `guid`, must not be `None`")

        self._guid = guid

    @property
    def entity_type(self):
        """
        Gets the entity_type of this PreModifier.
        The type of object this is.

        :return: The entity_type of this PreModifier.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """
        Sets the entity_type of this PreModifier.
        The type of object this is.

        :param entity_type: The entity_type of this PreModifier.
        :type: str
        """
        if entity_type is None:
            raise ValueError("Invalid value for `entity_type`, must not be `None`")

        self._entity_type = entity_type

    @property
    def name(self):
        """
        Gets the name of this PreModifier.
        The name of the pre modifier that appears in the Toast POS.

        :return: The name of this PreModifier.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this PreModifier.
        The name of the pre modifier that appears in the Toast POS.

        :param name: The name of this PreModifier.
        :type: str
        """

        self._name = name

    @property
    def scale_price(self):
        """
        Gets the scale_price of this PreModifier.
        True if this multiplies the modifier price, false if it adds to the modifier price.

        :return: The scale_price of this PreModifier.
        :rtype: bool
        """
        return self._scale_price

    @scale_price.setter
    def scale_price(self, scale_price):
        """
        Sets the scale_price of this PreModifier.
        True if this multiplies the modifier price, false if it adds to the modifier price.

        :param scale_price: The scale_price of this PreModifier.
        :type: bool
        """

        self._scale_price = scale_price

    @property
    def base_price(self):
        """
        Gets the base_price of this PreModifier.
        Amount to add to the modifier price, if scalePrice is false. Otherwise not used.

        :return: The base_price of this PreModifier.
        :rtype: float
        """
        return self._base_price

    @base_price.setter
    def base_price(self, base_price):
        """
        Sets the base_price of this PreModifier.
        Amount to add to the modifier price, if scalePrice is false. Otherwise not used.

        :param base_price: The base_price of this PreModifier.
        :type: float
        """

        self._base_price = base_price

    @property
    def scale_factor(self):
        """
        Gets the scale_factor of this PreModifier.
        Amount to multiply the modifier price, if scalePrice is true. Otherwise not used.

        :return: The scale_factor of this PreModifier.
        :rtype: float
        """
        return self._scale_factor

    @scale_factor.setter
    def scale_factor(self, scale_factor):
        """
        Sets the scale_factor of this PreModifier.
        Amount to multiply the modifier price, if scalePrice is true. Otherwise not used.

        :param scale_factor: The scale_factor of this PreModifier.
        :type: float
        """

        self._scale_factor = scale_factor

    @property
    def display_mode(self):
        """
        Gets the display_mode of this PreModifier.
        Where this premodifier should be displayed relative to the modifier name. PREFIX - before the modifier name SUFFIX - after the modifier name 

        :return: The display_mode of this PreModifier.
        :rtype: str
        """
        return self._display_mode

    @display_mode.setter
    def display_mode(self, display_mode):
        """
        Sets the display_mode of this PreModifier.
        Where this premodifier should be displayed relative to the modifier name. PREFIX - before the modifier name SUFFIX - after the modifier name 

        :param display_mode: The display_mode of this PreModifier.
        :type: str
        """
        allowed_values = ["PREFIX", "SUFFIX"]
        if display_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `display_mode` ({0}), must be one of {1}"
                .format(display_mode, allowed_values)
            )

        self._display_mode = display_mode

    @property
    def parent(self):
        """
        Gets the parent of this PreModifier.
        The pre modifier group the premodifier belongs to.

        :return: The parent of this PreModifier.
        :rtype: ToastReference
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this PreModifier.
        The pre modifier group the premodifier belongs to.

        :param parent: The parent of this PreModifier.
        :type: ToastReference
        """

        self._parent = parent

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PreModifier):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
