# coding: utf-8

"""
    Toast Configuration API

    ## Overview    You can use the Toast configuration API to retrieve information about   the configuration of a restaurant and its menus. This includes   menu items, menu groups, and alternate payment types, as well as   physical configuration such as cash drawers and restaurant   tables.    The configuration API does not return information about entities   that you have removed from your restaurant configuration or   archived. For example, if you remove a menu item or archive a   discount, the configuration API will not return the menu item or   discount in response data.    For more information about using this and other Toast APIs, see   the <cite>Toast API Developer's Guide.</cite> 

    OpenAPI spec version: 2.2.0
    Contact: integrations@toasttab.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MenuItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'guid': 'str',
        'entity_type': 'str',
        'external_id': 'str',
        'name': 'str',
        'sku': 'str',
        'plu': 'str',
        'orderable_online': 'str',
        'visibility': 'str',
        'type': 'str',
        'option_groups': 'list[ExternalReference]',
        'inherit_option_groups': 'bool',
        'images': 'list[Image]'
    }

    attribute_map = {
        'guid': 'guid',
        'entity_type': 'entityType',
        'external_id': 'externalId',
        'name': 'name',
        'sku': 'sku',
        'plu': 'plu',
        'orderable_online': 'orderableOnline',
        'visibility': 'visibility',
        'type': 'type',
        'option_groups': 'optionGroups',
        'inherit_option_groups': 'inheritOptionGroups',
        'images': 'images'
    }

    def __init__(self, guid=None, entity_type=None, external_id=None, name=None, sku=None, plu=None, orderable_online=None, visibility=None, type=None, option_groups=None, inherit_option_groups=None, images=None):
        """
        MenuItem - a model defined in Swagger
        """

        self._guid = None
        self._entity_type = None
        self._external_id = None
        self._name = None
        self._sku = None
        self._plu = None
        self._orderable_online = None
        self._visibility = None
        self._type = None
        self._option_groups = None
        self._inherit_option_groups = None
        self._images = None

        self.guid = guid
        self.entity_type = entity_type
        if external_id is not None:
          self.external_id = external_id
        if name is not None:
          self.name = name
        if sku is not None:
          self.sku = sku
        if plu is not None:
          self.plu = plu
        if orderable_online is not None:
          self.orderable_online = orderable_online
        if visibility is not None:
          self.visibility = visibility
        if type is not None:
          self.type = type
        if option_groups is not None:
          self.option_groups = option_groups
        if inherit_option_groups is not None:
          self.inherit_option_groups = inherit_option_groups
        if images is not None:
          self.images = images

    @property
    def guid(self):
        """
        Gets the guid of this MenuItem.
        The GUID maintained by the Toast POS.

        :return: The guid of this MenuItem.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """
        Sets the guid of this MenuItem.
        The GUID maintained by the Toast POS.

        :param guid: The guid of this MenuItem.
        :type: str
        """
        if guid is None:
            raise ValueError("Invalid value for `guid`, must not be `None`")

        self._guid = guid

    @property
    def entity_type(self):
        """
        Gets the entity_type of this MenuItem.
        The type of object this is.

        :return: The entity_type of this MenuItem.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """
        Sets the entity_type of this MenuItem.
        The type of object this is.

        :param entity_type: The entity_type of this MenuItem.
        :type: str
        """
        if entity_type is None:
            raise ValueError("Invalid value for `entity_type`, must not be `None`")

        self._entity_type = entity_type

    @property
    def external_id(self):
        """
        Gets the external_id of this MenuItem.
        External identifier string, prefixed by the naming authority.

        :return: The external_id of this MenuItem.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """
        Sets the external_id of this MenuItem.
        External identifier string, prefixed by the naming authority.

        :param external_id: The external_id of this MenuItem.
        :type: str
        """

        self._external_id = external_id

    @property
    def name(self):
        """
        Gets the name of this MenuItem.
        The name of the menu item as it appears in the Toast POS. 

        :return: The name of this MenuItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this MenuItem.
        The name of the menu item as it appears in the Toast POS. 

        :param name: The name of this MenuItem.
        :type: str
        """

        self._name = name

    @property
    def sku(self):
        """
        Gets the sku of this MenuItem.
        The stock keeping unit (SKU) code for the item.

        :return: The sku of this MenuItem.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """
        Sets the sku of this MenuItem.
        The stock keeping unit (SKU) code for the item.

        :param sku: The sku of this MenuItem.
        :type: str
        """

        self._sku = sku

    @property
    def plu(self):
        """
        Gets the plu of this MenuItem.
        The price look up (PLU) code for the item.

        :return: The plu of this MenuItem.
        :rtype: str
        """
        return self._plu

    @plu.setter
    def plu(self, plu):
        """
        Sets the plu of this MenuItem.
        The price look up (PLU) code for the item.

        :param plu: The plu of this MenuItem.
        :type: str
        """

        self._plu = plu

    @property
    def orderable_online(self):
        """
        Gets the orderable_online of this MenuItem.
        Indicates the orderableOnline status of this item

        :return: The orderable_online of this MenuItem.
        :rtype: str
        """
        return self._orderable_online

    @orderable_online.setter
    def orderable_online(self, orderable_online):
        """
        Sets the orderable_online of this MenuItem.
        Indicates the orderableOnline status of this item

        :param orderable_online: The orderable_online of this MenuItem.
        :type: str
        """

        self._orderable_online = orderable_online

    @property
    def visibility(self):
        """
        Gets the visibility of this MenuItem.
        The visibility of this item. ALL: Visible to everyone (servers and customers) POS_ONLY: Only visible to servers NONE: Hidden from everyone 

        :return: The visibility of this MenuItem.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """
        Sets the visibility of this MenuItem.
        The visibility of this item. ALL: Visible to everyone (servers and customers) POS_ONLY: Only visible to servers NONE: Hidden from everyone 

        :param visibility: The visibility of this MenuItem.
        :type: str
        """
        allowed_values = ["ALL", "POS_ONLY", "NONE"]
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"
                .format(visibility, allowed_values)
            )

        self._visibility = visibility

    @property
    def type(self):
        """
        Gets the type of this MenuItem.
        Specifies whether this item is a special request or other off-menu transaction. * `NONE` - a normal menu item or modifier. * `OPEN_ITEM` - an item that is not on a menu. * `SPECIAL_REQUEST` - a selection that is not an item. * `PORTION` - a division of a menu item used to apply modifiers separately to separate parts of an item. For example, one half of a pizza. 

        :return: The type of this MenuItem.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this MenuItem.
        Specifies whether this item is a special request or other off-menu transaction. * `NONE` - a normal menu item or modifier. * `OPEN_ITEM` - an item that is not on a menu. * `SPECIAL_REQUEST` - a selection that is not an item. * `PORTION` - a division of a menu item used to apply modifiers separately to separate parts of an item. For example, one half of a pizza. 

        :param type: The type of this MenuItem.
        :type: str
        """
        allowed_values = ["NONE", "OPEN_ITEM", "SPECIAL_REQUEST", "PORTION"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def option_groups(self):
        """
        Gets the option_groups of this MenuItem.
        An array of `ExternalReference` objects containing the identifiers of the <a href=\"#/definitions/MenuOptionGroup\">`MenuOptionGroup`s</a> that contain modifiers applicable to this item. Does not include those inherited from the parent `MenuGroup`. 

        :return: The option_groups of this MenuItem.
        :rtype: list[ExternalReference]
        """
        return self._option_groups

    @option_groups.setter
    def option_groups(self, option_groups):
        """
        Sets the option_groups of this MenuItem.
        An array of `ExternalReference` objects containing the identifiers of the <a href=\"#/definitions/MenuOptionGroup\">`MenuOptionGroup`s</a> that contain modifiers applicable to this item. Does not include those inherited from the parent `MenuGroup`. 

        :param option_groups: The option_groups of this MenuItem.
        :type: list[ExternalReference]
        """

        self._option_groups = option_groups

    @property
    def inherit_option_groups(self):
        """
        Gets the inherit_option_groups of this MenuItem.
        True if this menu item inherits <a href=\"#/definitions/MenuOptionGroup\">`MenuOptionGroup`s</a> from its parent <a href=\"#/definitions/MenuGroup\">`MenuGroup`</a>. 

        :return: The inherit_option_groups of this MenuItem.
        :rtype: bool
        """
        return self._inherit_option_groups

    @inherit_option_groups.setter
    def inherit_option_groups(self, inherit_option_groups):
        """
        Sets the inherit_option_groups of this MenuItem.
        True if this menu item inherits <a href=\"#/definitions/MenuOptionGroup\">`MenuOptionGroup`s</a> from its parent <a href=\"#/definitions/MenuGroup\">`MenuGroup`</a>. 

        :param inherit_option_groups: The inherit_option_groups of this MenuItem.
        :type: bool
        """

        self._inherit_option_groups = inherit_option_groups

    @property
    def images(self):
        """
        Gets the images of this MenuItem.
        An array of <a href=\"#/definitions/Image\">`Image`</a> objects that are associated with the `MenuItem`. 

        :return: The images of this MenuItem.
        :rtype: list[Image]
        """
        return self._images

    @images.setter
    def images(self, images):
        """
        Sets the images of this MenuItem.
        An array of <a href=\"#/definitions/Image\">`Image`</a> objects that are associated with the `MenuItem`. 

        :param images: The images of this MenuItem.
        :type: list[Image]
        """

        self._images = images

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MenuItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
