# coding: utf-8

"""
    Toast Configuration API

    ## Overview    You can use the Toast configuration API to retrieve information about   the configuration of a restaurant and its menus. This includes   menu items, menu groups, and alternate payment types, as well as   physical configuration such as cash drawers and restaurant   tables.    The configuration API does not return information about entities   that you have removed from your restaurant configuration or   archived. For example, if you remove a menu item or archive a   discount, the configuration API will not return the menu item or   discount in response data.    For more information about using this and other Toast APIs, see   the <cite>Toast API Developer's Guide.</cite> 

    OpenAPI spec version: 2.2.0
    Contact: integrations@toasttab.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DefaultApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def alternate_payment_types_get(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns an array of alternative forms of payment configured for a restaurant. 
        Returns an array of <a href=\"#/definitions/AlternatePaymentType\">`AlternatePaymentType`</a> objects containing information about alternative forms of payment that are configured for a restaurant. Alternate payment types are forms of payment that are not standard in the Toast POS and that are configured for a particular restaurant. For example, a third-party service that processes payments might be configured as an alternate payment type. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alternate_payment_types_get(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[AlternatePaymentType]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.alternate_payment_types_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
        else:
            (data) = self.alternate_payment_types_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
            return data

    def alternate_payment_types_get_with_http_info(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns an array of alternative forms of payment configured for a restaurant. 
        Returns an array of <a href=\"#/definitions/AlternatePaymentType\">`AlternatePaymentType`</a> objects containing information about alternative forms of payment that are configured for a restaurant. Alternate payment types are forms of payment that are not standard in the Toast POS and that are configured for a particular restaurant. For example, a third-party service that processes payments might be configured as an alternate payment type. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alternate_payment_types_get_with_http_info(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[AlternatePaymentType]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'page_size', 'page', 'last_modified']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alternate_payment_types_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `alternate_payment_types_get`")
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params) or (params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `alternate_payment_types_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'last_modified' in params:
            query_params.append(('lastModified', params['last_modified']))

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/alternatePaymentTypes', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[AlternatePaymentType]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def alternate_payment_types_guid_get(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about an alternative form of payment configured for a restaurant. 
        Returns an <a href=\"#/definitions/AlternatePaymentType\">`AlternatePaymentType`</a> object containing information about an alternative form of payment configured for a restaurant. Alternate payment types are forms of payment that are not standard in the Toast POS and that are configured for a particular restaurant. For example, a third-party service that processes payments might be configured as an alternate payment type. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alternate_payment_types_guid_get(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the alternate payment type is configured for.  (required)
        :param str guid: The Toast POS GUID of the alternative form of payment. (required)
        :return: AlternatePaymentType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.alternate_payment_types_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
        else:
            (data) = self.alternate_payment_types_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
            return data

    def alternate_payment_types_guid_get_with_http_info(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about an alternative form of payment configured for a restaurant. 
        Returns an <a href=\"#/definitions/AlternatePaymentType\">`AlternatePaymentType`</a> object containing information about an alternative form of payment configured for a restaurant. Alternate payment types are forms of payment that are not standard in the Toast POS and that are configured for a particular restaurant. For example, a third-party service that processes payments might be configured as an alternate payment type. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alternate_payment_types_guid_get_with_http_info(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the alternate payment type is configured for.  (required)
        :param str guid: The Toast POS GUID of the alternative form of payment. (required)
        :return: AlternatePaymentType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'guid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alternate_payment_types_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `alternate_payment_types_guid_get`")
        # verify the required parameter 'guid' is set
        if ('guid' not in params) or (params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `alternate_payment_types_guid_get`")


        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']

        query_params = []

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/alternatePaymentTypes/{guid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AlternatePaymentType',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cash_drawers_get(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns an array of information about cash drawers configured for a restaurant. 
        Returns an array of <a href=\"#/definitions/CashDrawer\">`CashDrawer`</a> objects containing information about the cash drawer devices for the restaurant. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cash_drawers_get(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[CashDrawer]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cash_drawers_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
        else:
            (data) = self.cash_drawers_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
            return data

    def cash_drawers_get_with_http_info(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns an array of information about cash drawers configured for a restaurant. 
        Returns an array of <a href=\"#/definitions/CashDrawer\">`CashDrawer`</a> objects containing information about the cash drawer devices for the restaurant. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cash_drawers_get_with_http_info(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[CashDrawer]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'page_size', 'page', 'last_modified']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cash_drawers_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `cash_drawers_get`")
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params) or (params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `cash_drawers_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'last_modified' in params:
            query_params.append(('lastModified', params['last_modified']))

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cashDrawers', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[CashDrawer]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cash_drawers_guid_get(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a specific cash drawer device. 
        Returns a <a href=\"#/definitions/CashDrawer\">`CashDrawer`</a> object containing information about a specific cash drawer device. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cash_drawers_guid_get(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the cash drawer. (required)
        :return: CashDrawer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cash_drawers_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
        else:
            (data) = self.cash_drawers_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
            return data

    def cash_drawers_guid_get_with_http_info(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a specific cash drawer device. 
        Returns a <a href=\"#/definitions/CashDrawer\">`CashDrawer`</a> object containing information about a specific cash drawer device. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cash_drawers_guid_get_with_http_info(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the cash drawer. (required)
        :return: CashDrawer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'guid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cash_drawers_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `cash_drawers_guid_get`")
        # verify the required parameter 'guid' is set
        if ('guid' not in params) or (params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `cash_drawers_guid_get`")


        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']

        query_params = []

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cashDrawers/{guid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CashDrawer',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def dining_options_get(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns an array of information about types of service offered by a restaurant. 
        Returns an array of <a href=\"#/definitions/DiningOption\">`DiningOption`</a> objects containing information about types of service offered by a restaurant. For example, dine in, take out, and delivery might be dining options for a restaurant. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.dining_options_get(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[DiningOption]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.dining_options_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
        else:
            (data) = self.dining_options_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
            return data

    def dining_options_get_with_http_info(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns an array of information about types of service offered by a restaurant. 
        Returns an array of <a href=\"#/definitions/DiningOption\">`DiningOption`</a> objects containing information about types of service offered by a restaurant. For example, dine in, take out, and delivery might be dining options for a restaurant. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.dining_options_get_with_http_info(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[DiningOption]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'page_size', 'page', 'last_modified']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dining_options_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `dining_options_get`")
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params) or (params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `dining_options_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'last_modified' in params:
            query_params.append(('lastModified', params['last_modified']))

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/diningOptions', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[DiningOption]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def dining_options_guid_get(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a specific type of service offered by a restaurant. 
        Returns a <a href=\"#/definitions/DiningOption\">`DiningOption`</a> object containing information about a type of service offered by a restaurant. For example, dine in, take out, and delivery might be dining options for a restaurant. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.dining_options_guid_get(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the dining option. (required)
        :return: DiningOption
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.dining_options_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
        else:
            (data) = self.dining_options_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
            return data

    def dining_options_guid_get_with_http_info(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a specific type of service offered by a restaurant. 
        Returns a <a href=\"#/definitions/DiningOption\">`DiningOption`</a> object containing information about a type of service offered by a restaurant. For example, dine in, take out, and delivery might be dining options for a restaurant. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.dining_options_guid_get_with_http_info(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the dining option. (required)
        :return: DiningOption
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'guid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dining_options_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `dining_options_guid_get`")
        # verify the required parameter 'guid' is set
        if ('guid' not in params) or (params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `dining_options_guid_get`")


        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']

        query_params = []

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/diningOptions/{guid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DiningOption',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def discounts_get(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns an array of information about price deductions configured for a restaurant. 
        Returns an array of <a href=\"#/definitions/Discount\">`Discount`</a> objects containing information about the price deductions configured for a restaurant. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.discounts_get(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[Discount]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.discounts_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
        else:
            (data) = self.discounts_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
            return data

    def discounts_get_with_http_info(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns an array of information about price deductions configured for a restaurant. 
        Returns an array of <a href=\"#/definitions/Discount\">`Discount`</a> objects containing information about the price deductions configured for a restaurant. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.discounts_get_with_http_info(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[Discount]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'page_size', 'page', 'last_modified']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method discounts_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `discounts_get`")
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params) or (params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `discounts_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'last_modified' in params:
            query_params.append(('lastModified', params['last_modified']))

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/discounts', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Discount]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def discounts_guid_get(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a price deduction configured for a restaurant. 
        Returns a <a href=\"#/definitions/Discount\">`Discount`</a> object containing information about a price deduction configured for a restaurant. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.discounts_guid_get(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the discount. (required)
        :return: Discount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.discounts_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
        else:
            (data) = self.discounts_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
            return data

    def discounts_guid_get_with_http_info(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a price deduction configured for a restaurant. 
        Returns a <a href=\"#/definitions/Discount\">`Discount`</a> object containing information about a price deduction configured for a restaurant. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.discounts_guid_get_with_http_info(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the discount. (required)
        :return: Discount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'guid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method discounts_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `discounts_guid_get`")
        # verify the required parameter 'guid' is set
        if ('guid' not in params) or (params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `discounts_guid_get`")


        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']

        query_params = []

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/discounts/{guid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Discount',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def menu_groups_get(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns an array of information about the sections of menus configured for a restaurant. 
        Returns an array of <a href=\"#/definitions/MenuGroup\">`MenuGroup`</a> objects containing information about the subsections of the menus configured for a restaurant. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.menu_groups_get(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[MenuGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.menu_groups_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
        else:
            (data) = self.menu_groups_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
            return data

    def menu_groups_get_with_http_info(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns an array of information about the sections of menus configured for a restaurant. 
        Returns an array of <a href=\"#/definitions/MenuGroup\">`MenuGroup`</a> objects containing information about the subsections of the menus configured for a restaurant. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.menu_groups_get_with_http_info(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[MenuGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'page_size', 'page', 'last_modified']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method menu_groups_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `menu_groups_get`")
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params) or (params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `menu_groups_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'last_modified' in params:
            query_params.append(('lastModified', params['last_modified']))

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/menuGroups', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[MenuGroup]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def menu_groups_guid_get(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a section within a menu. 
        Returns a <a href=\"#/definitions/MenuGroup\">`MenuGroup`</a> object containing information about a section within a menu. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.menu_groups_guid_get(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the menu group. (required)
        :return: MenuGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.menu_groups_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
        else:
            (data) = self.menu_groups_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
            return data

    def menu_groups_guid_get_with_http_info(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a section within a menu. 
        Returns a <a href=\"#/definitions/MenuGroup\">`MenuGroup`</a> object containing information about a section within a menu. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.menu_groups_guid_get_with_http_info(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the menu group. (required)
        :return: MenuGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'guid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method menu_groups_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `menu_groups_guid_get`")
        # verify the required parameter 'guid' is set
        if ('guid' not in params) or (params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `menu_groups_guid_get`")


        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']

        query_params = []

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/menuGroups/{guid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MenuGroup',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def menu_items_get(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns information about the items and modifiers available from a restaurant. 
        Returns an array of <a href=\"#/definitions/MenuItem\">`MenuItem`</a> objects containing information about the items and modifiers available from a restaurant. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.menu_items_get(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[MenuItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.menu_items_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
        else:
            (data) = self.menu_items_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
            return data

    def menu_items_get_with_http_info(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns information about the items and modifiers available from a restaurant. 
        Returns an array of <a href=\"#/definitions/MenuItem\">`MenuItem`</a> objects containing information about the items and modifiers available from a restaurant. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.menu_items_get_with_http_info(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[MenuItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'page_size', 'page', 'last_modified']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method menu_items_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `menu_items_get`")
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params) or (params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `menu_items_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'last_modified' in params:
            query_params.append(('lastModified', params['last_modified']))

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/menuItems', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[MenuItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def menu_items_guid_get(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about an item or modifier available from a restaurant. 
        Returns a <a href=\"#/definitions/MenuItem\">`MenuItem`</a> object containing information about an item or modifier available from a restaurant. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.menu_items_guid_get(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID for the menu item. (required)
        :return: MenuItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.menu_items_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
        else:
            (data) = self.menu_items_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
            return data

    def menu_items_guid_get_with_http_info(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about an item or modifier available from a restaurant. 
        Returns a <a href=\"#/definitions/MenuItem\">`MenuItem`</a> object containing information about an item or modifier available from a restaurant. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.menu_items_guid_get_with_http_info(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID for the menu item. (required)
        :return: MenuItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'guid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method menu_items_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `menu_items_guid_get`")
        # verify the required parameter 'guid' is set
        if ('guid' not in params) or (params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `menu_items_guid_get`")


        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']

        query_params = []

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/menuItems/{guid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MenuItem',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def menu_option_groups_get(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns information about the groups of modifier menu items configured for a restaurant. 
        Returns an array <a href=\"#/definitions/MenuOptionGroup\">`MenuOptionGroup`</a> objects containing information about groups of modifier menu items. For example, salad dressings might be a menu option group for a salad menu item. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.menu_option_groups_get(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[MenuOptionGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.menu_option_groups_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
        else:
            (data) = self.menu_option_groups_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
            return data

    def menu_option_groups_get_with_http_info(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns information about the groups of modifier menu items configured for a restaurant. 
        Returns an array <a href=\"#/definitions/MenuOptionGroup\">`MenuOptionGroup`</a> objects containing information about groups of modifier menu items. For example, salad dressings might be a menu option group for a salad menu item. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.menu_option_groups_get_with_http_info(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[MenuOptionGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'page_size', 'page', 'last_modified']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method menu_option_groups_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `menu_option_groups_get`")
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params) or (params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `menu_option_groups_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'last_modified' in params:
            query_params.append(('lastModified', params['last_modified']))

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/menuOptionGroups', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[MenuOptionGroup]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def menu_option_groups_guid_get(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a group of modifier menu items. 
        Returns a <a href=\"#/definitions/MenuOptionGroup\">`MenuOptionGroup`</a> object containing information about a group of modifier menu items. For example, salad dressings might be a menu option group for a salad menu item. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.menu_option_groups_guid_get(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the menu option group. (required)
        :return: MenuOptionGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.menu_option_groups_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
        else:
            (data) = self.menu_option_groups_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
            return data

    def menu_option_groups_guid_get_with_http_info(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a group of modifier menu items. 
        Returns a <a href=\"#/definitions/MenuOptionGroup\">`MenuOptionGroup`</a> object containing information about a group of modifier menu items. For example, salad dressings might be a menu option group for a salad menu item. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.menu_option_groups_guid_get_with_http_info(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the menu option group. (required)
        :return: MenuOptionGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'guid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method menu_option_groups_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `menu_option_groups_guid_get`")
        # verify the required parameter 'guid' is set
        if ('guid' not in params) or (params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `menu_option_groups_guid_get`")


        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']

        query_params = []

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/menuOptionGroups/{guid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MenuOptionGroup',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def menus_get(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns information about the menus configured for a restaurant. 
        Returns an array of <a href=\"#/definitions/Menu\">`Menu`</a> objects containing information about menus configured for a restaurant. For example, a restaurant might have drinks, dinner, and dessert menus. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.menus_get(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[Menu]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.menus_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
        else:
            (data) = self.menus_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
            return data

    def menus_get_with_http_info(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns information about the menus configured for a restaurant. 
        Returns an array of <a href=\"#/definitions/Menu\">`Menu`</a> objects containing information about menus configured for a restaurant. For example, a restaurant might have drinks, dinner, and dessert menus. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.menus_get_with_http_info(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[Menu]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'page_size', 'page', 'last_modified']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method menus_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `menus_get`")
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params) or (params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `menus_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'last_modified' in params:
            query_params.append(('lastModified', params['last_modified']))

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/menus', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Menu]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def menus_guid_get(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a menu configured for a restaurant. 
        Returns a <a href=\"#/definitions/Menu\">`Menu`</a> object containing information about a menu configured for a restaurant. For example, a restaurant might have drinks, dinner, and dessert menus. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.menus_guid_get(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the menu. (required)
        :return: Menu
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.menus_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
        else:
            (data) = self.menus_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
            return data

    def menus_guid_get_with_http_info(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a menu configured for a restaurant. 
        Returns a <a href=\"#/definitions/Menu\">`Menu`</a> object containing information about a menu configured for a restaurant. For example, a restaurant might have drinks, dinner, and dessert menus. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.menus_guid_get_with_http_info(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the menu. (required)
        :return: Menu
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'guid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method menus_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `menus_guid_get`")
        # verify the required parameter 'guid' is set
        if ('guid' not in params) or (params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `menus_guid_get`")


        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']

        query_params = []

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/menus/{guid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Menu',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def no_sale_reasons_get(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns information about no sale reasons configured for a restaurant. 
        Returns an array of <a href=\"#/definitions/NoSaleReason\">`NoSaleReason`</a> objects containing information about no sale reasons configured for a restaurant. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.no_sale_reasons_get(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[NoSaleReason]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.no_sale_reasons_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
        else:
            (data) = self.no_sale_reasons_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
            return data

    def no_sale_reasons_get_with_http_info(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns information about no sale reasons configured for a restaurant. 
        Returns an array of <a href=\"#/definitions/NoSaleReason\">`NoSaleReason`</a> objects containing information about no sale reasons configured for a restaurant. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.no_sale_reasons_get_with_http_info(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[NoSaleReason]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'page_size', 'page', 'last_modified']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method no_sale_reasons_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `no_sale_reasons_get`")
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params) or (params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `no_sale_reasons_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'last_modified' in params:
            query_params.append(('lastModified', params['last_modified']))

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/noSaleReasons', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[NoSaleReason]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def no_sale_reasons_guid_get(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a no sale reason configured for a restaurant. 
        Returns a <a href=\"#/definitions/NoSaleReason\">`NoSaleReason`</a> object containing information about a no sale reason. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.no_sale_reasons_guid_get(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the no sale reason. (required)
        :return: NoSaleReason
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.no_sale_reasons_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
        else:
            (data) = self.no_sale_reasons_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
            return data

    def no_sale_reasons_guid_get_with_http_info(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a no sale reason configured for a restaurant. 
        Returns a <a href=\"#/definitions/NoSaleReason\">`NoSaleReason`</a> object containing information about a no sale reason. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.no_sale_reasons_guid_get_with_http_info(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the no sale reason. (required)
        :return: NoSaleReason
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'guid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method no_sale_reasons_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `no_sale_reasons_guid_get`")
        # verify the required parameter 'guid' is set
        if ('guid' not in params) or (params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `no_sale_reasons_guid_get`")


        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']

        query_params = []

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/noSaleReasons/{guid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='NoSaleReason',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def payout_reasons_get(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns information about recurring cash expenses configured for a restaurant. 
        Returns an array of <a href=\"#/definitions/PayoutReason\">`PayoutReason`</a> objects containing information about recurring cash expenses configured for a restaurant. For example, payment for services such as window washing might be payout reasons. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.payout_reasons_get(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[PayoutReason]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.payout_reasons_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
        else:
            (data) = self.payout_reasons_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
            return data

    def payout_reasons_get_with_http_info(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns information about recurring cash expenses configured for a restaurant. 
        Returns an array of <a href=\"#/definitions/PayoutReason\">`PayoutReason`</a> objects containing information about recurring cash expenses configured for a restaurant. For example, payment for services such as window washing might be payout reasons. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.payout_reasons_get_with_http_info(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[PayoutReason]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'page_size', 'page', 'last_modified']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payout_reasons_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `payout_reasons_get`")
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params) or (params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `payout_reasons_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'last_modified' in params:
            query_params.append(('lastModified', params['last_modified']))

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/payoutReasons', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[PayoutReason]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def payout_reasons_guid_get(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a recurring cash expense configured for a restaurant. 
        Returns a <a href=\"#/definitions/PayoutReason\">`PayoutReason`</a> object containing information about a recurring restaurant expense that is paid in cash. Payout reasons are pre-configured for a restaurant. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.payout_reasons_guid_get(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the payout reason. (required)
        :return: PayoutReason
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.payout_reasons_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
        else:
            (data) = self.payout_reasons_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
            return data

    def payout_reasons_guid_get_with_http_info(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a recurring cash expense configured for a restaurant. 
        Returns a <a href=\"#/definitions/PayoutReason\">`PayoutReason`</a> object containing information about a recurring restaurant expense that is paid in cash. Payout reasons are pre-configured for a restaurant. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.payout_reasons_guid_get_with_http_info(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the payout reason. (required)
        :return: PayoutReason
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'guid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payout_reasons_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `payout_reasons_guid_get`")
        # verify the required parameter 'guid' is set
        if ('guid' not in params) or (params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `payout_reasons_guid_get`")


        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']

        query_params = []

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/payoutReasons/{guid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PayoutReason',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def pre_modifier_groups_get(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns information about pre modifier groups configured for a restaurant. 
        Returns an array of <a href=\"#/definitions/PreModifierGroup\">`PreModifierGroup`</a> objects containing information about PreModifierGroup configured for a restaurant. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.pre_modifier_groups_get(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[PreModifierGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.pre_modifier_groups_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
        else:
            (data) = self.pre_modifier_groups_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
            return data

    def pre_modifier_groups_get_with_http_info(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns information about pre modifier groups configured for a restaurant. 
        Returns an array of <a href=\"#/definitions/PreModifierGroup\">`PreModifierGroup`</a> objects containing information about PreModifierGroup configured for a restaurant. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.pre_modifier_groups_get_with_http_info(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[PreModifierGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'page_size', 'page', 'last_modified']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pre_modifier_groups_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `pre_modifier_groups_get`")
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params) or (params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `pre_modifier_groups_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'last_modified' in params:
            query_params.append(('lastModified', params['last_modified']))

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/preModifierGroups', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[PreModifierGroup]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def pre_modifier_groups_guid_get(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a pre modifier group configured for a restaurant. 
        Returns a <a href=\"#/definitions/PreModifierGroup\">`PreModifierGroup`</a> object containing information about a pre modifier group. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.pre_modifier_groups_guid_get(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the pre modifier. (required)
        :return: PreModifierGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.pre_modifier_groups_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
        else:
            (data) = self.pre_modifier_groups_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
            return data

    def pre_modifier_groups_guid_get_with_http_info(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a pre modifier group configured for a restaurant. 
        Returns a <a href=\"#/definitions/PreModifierGroup\">`PreModifierGroup`</a> object containing information about a pre modifier group. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.pre_modifier_groups_guid_get_with_http_info(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the pre modifier. (required)
        :return: PreModifierGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'guid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pre_modifier_groups_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `pre_modifier_groups_guid_get`")
        # verify the required parameter 'guid' is set
        if ('guid' not in params) or (params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `pre_modifier_groups_guid_get`")


        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']

        query_params = []

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/preModifierGroups/{guid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PreModifierGroup',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def pre_modifiers_get(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns information about pre modifiers configured for a restaurant. 
        Returns an array of <a href=\"#/definitions/PreModifier\">`PreModifier`</a> objects containing information about PreModifiers configured for a restaurant. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.pre_modifiers_get(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[PreModifier]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.pre_modifiers_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
        else:
            (data) = self.pre_modifiers_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
            return data

    def pre_modifiers_get_with_http_info(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns information about pre modifiers configured for a restaurant. 
        Returns an array of <a href=\"#/definitions/PreModifier\">`PreModifier`</a> objects containing information about PreModifiers configured for a restaurant. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.pre_modifiers_get_with_http_info(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[PreModifier]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'page_size', 'page', 'last_modified']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pre_modifiers_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `pre_modifiers_get`")
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params) or (params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `pre_modifiers_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'last_modified' in params:
            query_params.append(('lastModified', params['last_modified']))

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/preModifiers', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[PreModifier]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def pre_modifiers_guid_get(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a pre modifier configured for a restaurant. 
        Returns a <a href=\"#/definitions/PreModifier\">`PreModifier`</a> object containing information about a pre modifier. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.pre_modifiers_guid_get(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the pre modifier. (required)
        :return: PreModifier
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.pre_modifiers_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
        else:
            (data) = self.pre_modifiers_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
            return data

    def pre_modifiers_guid_get_with_http_info(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a pre modifier configured for a restaurant. 
        Returns a <a href=\"#/definitions/PreModifier\">`PreModifier`</a> object containing information about a pre modifier. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.pre_modifiers_guid_get_with_http_info(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the pre modifier. (required)
        :return: PreModifier
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'guid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pre_modifiers_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `pre_modifiers_guid_get`")
        # verify the required parameter 'guid' is set
        if ('guid' not in params) or (params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `pre_modifiers_guid_get`")


        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']

        query_params = []

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/preModifiers/{guid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PreModifier',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def price_groups_get(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns information about the variable price levels configured for items at a restaurant. 
        Returns an array of <a href=\"#/definitions/PriceGroup\">`PriceGroup`</a> objects containing information about the variable price levels configured for items at a restaurant. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.price_groups_get(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[PriceGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.price_groups_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
        else:
            (data) = self.price_groups_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
            return data

    def price_groups_get_with_http_info(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns information about the variable price levels configured for items at a restaurant. 
        Returns an array of <a href=\"#/definitions/PriceGroup\">`PriceGroup`</a> objects containing information about the variable price levels configured for items at a restaurant. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.price_groups_get_with_http_info(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[PriceGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'page_size', 'page', 'last_modified']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method price_groups_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `price_groups_get`")
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params) or (params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `price_groups_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'last_modified' in params:
            query_params.append(('lastModified', params['last_modified']))

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/priceGroups', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[PriceGroup]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def price_groups_guid_get(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a variable price level configured for items at a restaurant. 
        Returns a <a href=\"#/definitions/PriceGroup\">`PriceGroup`</a> object containing information about variable price levels configured for items at a restaurant. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.price_groups_guid_get(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the price level. (required)
        :return: PriceGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.price_groups_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
        else:
            (data) = self.price_groups_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
            return data

    def price_groups_guid_get_with_http_info(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a variable price level configured for items at a restaurant. 
        Returns a <a href=\"#/definitions/PriceGroup\">`PriceGroup`</a> object containing information about variable price levels configured for items at a restaurant. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.price_groups_guid_get_with_http_info(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the price level. (required)
        :return: PriceGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'guid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method price_groups_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `price_groups_guid_get`")
        # verify the required parameter 'guid' is set
        if ('guid' not in params) or (params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `price_groups_guid_get`")


        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']

        query_params = []

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/priceGroups/{guid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PriceGroup',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def printers_get(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns information about the printer devices configured for a restaurant. 
        Returns an array of <a href=\"#/definitions/Printer\">`Printer`</a> objects containing information about the printer devices configured for a restaurant. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.printers_get(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[Printer]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.printers_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
        else:
            (data) = self.printers_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
            return data

    def printers_get_with_http_info(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns information about the printer devices configured for a restaurant. 
        Returns an array of <a href=\"#/definitions/Printer\">`Printer`</a> objects containing information about the printer devices configured for a restaurant. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.printers_get_with_http_info(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[Printer]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'page_size', 'page', 'last_modified']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method printers_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `printers_get`")
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params) or (params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `printers_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'last_modified' in params:
            query_params.append(('lastModified', params['last_modified']))

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/printers', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Printer]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def printers_guid_get(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a printer device configured for a restaurant. 
        Returns a <a href=\"#/definitions/Printer\">`Printer`</a> object containing information about a printer device configured for a restaurant. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.printers_guid_get(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the printer. (required)
        :return: Printer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.printers_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
        else:
            (data) = self.printers_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
            return data

    def printers_guid_get_with_http_info(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a printer device configured for a restaurant. 
        Returns a <a href=\"#/definitions/Printer\">`Printer`</a> object containing information about a printer device configured for a restaurant. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.printers_guid_get_with_http_info(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the printer. (required)
        :return: Printer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'guid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method printers_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `printers_guid_get`")
        # verify the required parameter 'guid' is set
        if ('guid' not in params) or (params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `printers_guid_get`")


        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']

        query_params = []

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/printers/{guid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Printer',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def restaurant_services_get(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns information about the types of menu and dining offered by a restaurant. 
        Returns an array of <a href=\"#/definitions/RestaurantService\">`RestaurantService`</a> objects containing information about the types of menu and dining offered by a restaurant. For example, a restaurant might offer a lunch service at some hours of the day and a dinner service at other hours of the day. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.restaurant_services_get(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[RestaurantService]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.restaurant_services_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
        else:
            (data) = self.restaurant_services_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
            return data

    def restaurant_services_get_with_http_info(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns information about the types of menu and dining offered by a restaurant. 
        Returns an array of <a href=\"#/definitions/RestaurantService\">`RestaurantService`</a> objects containing information about the types of menu and dining offered by a restaurant. For example, a restaurant might offer a lunch service at some hours of the day and a dinner service at other hours of the day. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.restaurant_services_get_with_http_info(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[RestaurantService]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'page_size', 'page', 'last_modified']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restaurant_services_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `restaurant_services_get`")
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params) or (params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `restaurant_services_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'last_modified' in params:
            query_params.append(('lastModified', params['last_modified']))

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/restaurantServices', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[RestaurantService]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def restaurant_services_guid_get(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a type of menu and dining offered by a restaurant. 
        Returns a <a href=\"#/definitions/RestaurantService\">`RestaurantService`</a> object containing information about a type of menu and dining offered by a restaurant. For example, a restaurant might offer a lunch service at some hours of the day and a dinner service at other hours of the day. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.restaurant_services_guid_get(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the service. (required)
        :return: RestaurantService
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.restaurant_services_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
        else:
            (data) = self.restaurant_services_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
            return data

    def restaurant_services_guid_get_with_http_info(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a type of menu and dining offered by a restaurant. 
        Returns a <a href=\"#/definitions/RestaurantService\">`RestaurantService`</a> object containing information about a type of menu and dining offered by a restaurant. For example, a restaurant might offer a lunch service at some hours of the day and a dinner service at other hours of the day. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.restaurant_services_guid_get_with_http_info(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the service. (required)
        :return: RestaurantService
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'guid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restaurant_services_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `restaurant_services_guid_get`")
        # verify the required parameter 'guid' is set
        if ('guid' not in params) or (params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `restaurant_services_guid_get`")


        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']

        query_params = []

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/restaurantServices/{guid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='RestaurantService',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def revenue_centers_get(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns information about segments of restaurant income, for reporting. 
        Returns an array of <a href=\"#/definitions/RevenueCenter\">`RevenueCenter`</a> objects containing information about segments of restaurant income, for reporting. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.revenue_centers_get(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[RevenueCenter]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.revenue_centers_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
        else:
            (data) = self.revenue_centers_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
            return data

    def revenue_centers_get_with_http_info(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns information about segments of restaurant income, for reporting. 
        Returns an array of <a href=\"#/definitions/RevenueCenter\">`RevenueCenter`</a> objects containing information about segments of restaurant income, for reporting. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.revenue_centers_get_with_http_info(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[RevenueCenter]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'page_size', 'page', 'last_modified']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revenue_centers_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `revenue_centers_get`")
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params) or (params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `revenue_centers_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'last_modified' in params:
            query_params.append(('lastModified', params['last_modified']))

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/revenueCenters', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[RevenueCenter]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def revenue_centers_guid_get(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a segment of restaurant income, for reporting. 
        Returns a <a href=\"#/definitions/RevenueCenter\">`RevenueCenter`</a> object containing information about a segment of restaurant income, for reporting. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.revenue_centers_guid_get(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the revenue center. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.revenue_centers_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
        else:
            (data) = self.revenue_centers_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
            return data

    def revenue_centers_guid_get_with_http_info(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a segment of restaurant income, for reporting. 
        Returns a <a href=\"#/definitions/RevenueCenter\">`RevenueCenter`</a> object containing information about a segment of restaurant income, for reporting. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.revenue_centers_guid_get_with_http_info(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the revenue center. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'guid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revenue_centers_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `revenue_centers_guid_get`")
        # verify the required parameter 'guid' is set
        if ('guid' not in params) or (params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `revenue_centers_guid_get`")


        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']

        query_params = []

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/revenueCenters/{guid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def sales_categories_get(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns information about types of menu item used to analyze purchases at a restaurant. 
        Returns an array of <a href=\"#/definitions/SalesCategory\">`SalesCategory`</a> objects containing information about the types of menu item used to analyze purchases at a restaurant. For example, food and alcohol might be sales categories for a restaurant. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.sales_categories_get(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[SalesCategory]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.sales_categories_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
        else:
            (data) = self.sales_categories_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
            return data

    def sales_categories_get_with_http_info(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns information about types of menu item used to analyze purchases at a restaurant. 
        Returns an array of <a href=\"#/definitions/SalesCategory\">`SalesCategory`</a> objects containing information about the types of menu item used to analyze purchases at a restaurant. For example, food and alcohol might be sales categories for a restaurant. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.sales_categories_get_with_http_info(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[SalesCategory]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'page_size', 'page', 'last_modified']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sales_categories_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `sales_categories_get`")
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params) or (params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `sales_categories_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'last_modified' in params:
            query_params.append(('lastModified', params['last_modified']))

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/salesCategories', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[SalesCategory]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def sales_categories_guid_get(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a type of menu item used to analyze purchases at a restaurant. 
        Returns a <a href=\"#/definitions/SalesCategory\">`SalesCategory`</a> object containing information about a type of menu item used to analyze purchases at a restaurant. For example, food and alcohol might be sales categories for a restaurant. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.sales_categories_guid_get(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the sales category. (required)
        :return: SalesCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.sales_categories_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
        else:
            (data) = self.sales_categories_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
            return data

    def sales_categories_guid_get_with_http_info(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a type of menu item used to analyze purchases at a restaurant. 
        Returns a <a href=\"#/definitions/SalesCategory\">`SalesCategory`</a> object containing information about a type of menu item used to analyze purchases at a restaurant. For example, food and alcohol might be sales categories for a restaurant. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.sales_categories_guid_get_with_http_info(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the sales category. (required)
        :return: SalesCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'guid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sales_categories_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `sales_categories_guid_get`")
        # verify the required parameter 'guid' is set
        if ('guid' not in params) or (params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `sales_categories_guid_get`")


        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']

        query_params = []

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/salesCategories/{guid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SalesCategory',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def service_areas_get(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns information about the physical settings that a restaurant serves customers in. 
        Returns an array of <a href=\"#/definitions/ServiceArea\">`ServiceArea`</a> objects containing information about the physical settings that a restaurant serves customers in. For example, a restaurant might serve customers in dining room and patio service areas. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.service_areas_get(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[ServiceArea]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.service_areas_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
        else:
            (data) = self.service_areas_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
            return data

    def service_areas_get_with_http_info(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns information about the physical settings that a restaurant serves customers in. 
        Returns an array of <a href=\"#/definitions/ServiceArea\">`ServiceArea`</a> objects containing information about the physical settings that a restaurant serves customers in. For example, a restaurant might serve customers in dining room and patio service areas. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.service_areas_get_with_http_info(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[ServiceArea]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'page_size', 'page', 'last_modified']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_areas_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `service_areas_get`")
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params) or (params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `service_areas_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'last_modified' in params:
            query_params.append(('lastModified', params['last_modified']))

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/serviceAreas', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[ServiceArea]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def service_areas_guid_get(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a physical setting that a restaurant serves customers in. 
        Returns a <a href=\"#/definitions/ServiceArea\">`ServiceArea`</a> object containing information about a physical setting that a restaurant serves customers in. For example, a restaurant might serve customers in dining room and patio service areas. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.service_areas_guid_get(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the service area. (required)
        :return: ServiceArea
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.service_areas_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
        else:
            (data) = self.service_areas_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
            return data

    def service_areas_guid_get_with_http_info(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a physical setting that a restaurant serves customers in. 
        Returns a <a href=\"#/definitions/ServiceArea\">`ServiceArea`</a> object containing information about a physical setting that a restaurant serves customers in. For example, a restaurant might serve customers in dining room and patio service areas. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.service_areas_guid_get_with_http_info(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the service area. (required)
        :return: ServiceArea
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'guid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_areas_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `service_areas_guid_get`")
        # verify the required parameter 'guid' is set
        if ('guid' not in params) or (params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `service_areas_guid_get`")


        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']

        query_params = []

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/serviceAreas/{guid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ServiceArea',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def service_charges_get(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns information about the types of fees applied to restaurant sales. 
        Returns an array of <a href=\"#/definitions/ServiceCharge\">`ServiceCharge`</a> objects containing information about the types of fee applied to restaurant sales. For example, an automatic gratuity applied to the check for a large dining party might be a type of service charge for a restaurant. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.service_charges_get(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[ServiceCharge]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.service_charges_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
        else:
            (data) = self.service_charges_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
            return data

    def service_charges_get_with_http_info(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns information about the types of fees applied to restaurant sales. 
        Returns an array of <a href=\"#/definitions/ServiceCharge\">`ServiceCharge`</a> objects containing information about the types of fee applied to restaurant sales. For example, an automatic gratuity applied to the check for a large dining party might be a type of service charge for a restaurant. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.service_charges_get_with_http_info(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[ServiceCharge]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'page_size', 'page', 'last_modified']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_charges_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `service_charges_get`")
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params) or (params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `service_charges_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'last_modified' in params:
            query_params.append(('lastModified', params['last_modified']))

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/serviceCharges', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[ServiceCharge]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def service_charges_guid_get(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a type of fee applied to restaurant sales. 
        Returns a <a href=\"#/definitions/ServiceCharge\">`ServiceCharge`</a> object containing information about a type of fee applied to restaurant sales. For example, an automatic gratuity applied to the check for a large dining party might be a type of service charge for a restaurant. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.service_charges_guid_get(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the service charge. (required)
        :return: ServiceCharge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.service_charges_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
        else:
            (data) = self.service_charges_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
            return data

    def service_charges_guid_get_with_http_info(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a type of fee applied to restaurant sales. 
        Returns a <a href=\"#/definitions/ServiceCharge\">`ServiceCharge`</a> object containing information about a type of fee applied to restaurant sales. For example, an automatic gratuity applied to the check for a large dining party might be a type of service charge for a restaurant. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.service_charges_guid_get_with_http_info(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the service charge. (required)
        :return: ServiceCharge
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'guid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_charges_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `service_charges_guid_get`")
        # verify the required parameter 'guid' is set
        if ('guid' not in params) or (params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `service_charges_guid_get`")


        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']

        query_params = []

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/serviceCharges/{guid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ServiceCharge',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def tables_get(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns information about the dining tables configured for a restaurant. 
        Returns an array of <a href=\"#/definitions/Table\">`Table`</a> objects containing information about the dining tables configured for a restaurant. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tables_get(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[Table]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.tables_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
        else:
            (data) = self.tables_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
            return data

    def tables_get_with_http_info(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns information about the dining tables configured for a restaurant. 
        Returns an array of <a href=\"#/definitions/Table\">`Table`</a> objects containing information about the dining tables configured for a restaurant. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tables_get_with_http_info(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[Table]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'page_size', 'page', 'last_modified']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tables_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `tables_get`")
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params) or (params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `tables_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'last_modified' in params:
            query_params.append(('lastModified', params['last_modified']))

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/tables', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Table]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def tables_guid_get(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a dining table configured for a restaurant. 
        Returns a <a href=\"#/definitions/Table\">`Table`</a> object containing information about a dining table configured for a restaurant.  
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tables_guid_get(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the table. (required)
        :return: Table
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.tables_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
        else:
            (data) = self.tables_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
            return data

    def tables_guid_get_with_http_info(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a dining table configured for a restaurant. 
        Returns a <a href=\"#/definitions/Table\">`Table`</a> object containing information about a dining table configured for a restaurant.  
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tables_guid_get_with_http_info(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the table. (required)
        :return: Table
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'guid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tables_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `tables_guid_get`")
        # verify the required parameter 'guid' is set
        if ('guid' not in params) or (params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `tables_guid_get`")


        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']

        query_params = []

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/tables/{guid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Table',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def tax_rates_get(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns information about the forms of taxation applied to sales at a restaurant. 
        Returns an array of <a href=\"#/definitions/TaxRate\">`TaxRate`</a> objects containing information about the forms of taxation applied to sales at a restaurant. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tax_rates_get(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[TaxRate]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.tax_rates_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
        else:
            (data) = self.tax_rates_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
            return data

    def tax_rates_get_with_http_info(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns information about the forms of taxation applied to sales at a restaurant. 
        Returns an array of <a href=\"#/definitions/TaxRate\">`TaxRate`</a> objects containing information about the forms of taxation applied to sales at a restaurant. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tax_rates_get_with_http_info(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[TaxRate]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'page_size', 'page', 'last_modified']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tax_rates_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `tax_rates_get`")
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params) or (params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `tax_rates_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'last_modified' in params:
            query_params.append(('lastModified', params['last_modified']))

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/taxRates', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[TaxRate]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def tax_rates_guid_get(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a form of taxation applied to sales at a restaurant. 
        Returns a <a href=\"#/definitions/TaxRate\">`TaxRate`</a> object containing information about a form of taxation applied to sales at a restaurant. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tax_rates_guid_get(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the tax rate. (required)
        :return: TaxRate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.tax_rates_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
        else:
            (data) = self.tax_rates_guid_get_with_http_info(toast_restaurant_external_id, guid, **kwargs)
            return data

    def tax_rates_guid_get_with_http_info(self, toast_restaurant_external_id, guid, **kwargs):
        """
        Returns information about a form of taxation applied to sales at a restaurant. 
        Returns a <a href=\"#/definitions/TaxRate\">`TaxRate`</a> object containing information about a form of taxation applied to sales at a restaurant. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.tax_rates_guid_get_with_http_info(toast_restaurant_external_id, guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param str guid: The Toast POS GUID of the tax rate. (required)
        :return: TaxRate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'guid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tax_rates_guid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `tax_rates_guid_get`")
        # verify the required parameter 'guid' is set
        if ('guid' not in params) or (params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `tax_rates_guid_get`")


        collection_formats = {}

        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']

        query_params = []

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/taxRates/{guid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TaxRate',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def void_reasons_get(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns information about the causes for making a sale invalid configured for a restaurant. 
        Returns an array of <a href=\"#/definitions/VoidReason\">`VoidReason`</a> objects containing information about causes for making a sale invalid configured for a restaurant. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.void_reasons_get(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[VoidReason]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.void_reasons_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
        else:
            (data) = self.void_reasons_get_with_http_info(toast_restaurant_external_id, page_size, **kwargs)
            return data

    def void_reasons_get_with_http_info(self, toast_restaurant_external_id, page_size, **kwargs):
        """
        Returns information about the causes for making a sale invalid configured for a restaurant. 
        Returns an array of <a href=\"#/definitions/VoidReason\">`VoidReason`</a> objects containing information about causes for making a sale invalid configured for a restaurant. If a `lastModified` date is specified, returns all objects that were created or modified after that date. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.void_reasons_get_with_http_info(toast_restaurant_external_id, page_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str toast_restaurant_external_id: The Toast POS GUID of the restaurant that the configuration applies to.  (required)
        :param int page_size: The number of objects to return in the array.  (required)
        :param int page: The sequence number of the first object to return in the array. 
        :param date last_modified: Limits the return data to objects created or modified after a specific date and time. For example: `2015-12-01T00:00:00.000+0000`. 
        :return: list[VoidReason]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['toast_restaurant_external_id', 'page_size', 'page', 'last_modified']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method void_reasons_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'toast_restaurant_external_id' is set
        if ('toast_restaurant_external_id' not in params) or (params['toast_restaurant_external_id'] is None):
            raise ValueError("Missing the required parameter `toast_restaurant_external_id` when calling `void_reasons_get`")
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params) or (params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `void_reasons_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'last_modified' in params:
            query_params.append(('lastModified', params['last_modified']))

        header_params = {}
        if 'toast_restaurant_external_id' in params:
            header_params['Toast-Restaurant-External-ID'] = params['toast_restaurant_external_id']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/voidReasons', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[VoidReason]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
