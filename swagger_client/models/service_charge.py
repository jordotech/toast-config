# coding: utf-8

"""
    Toast Configuration API

    ## Overview    You can use the Toast configuration API to retrieve information about   the configuration of a restaurant and its menus. This includes   menu items, menu groups, and alternate payment types, as well as   physical configuration such as cash drawers and restaurant   tables.    The configuration API does not return information about entities   that you have removed from your restaurant configuration or   archived. For example, if you remove a menu item or archive a   discount, the configuration API will not return the menu item or   discount in response data.    For more information about using this and other Toast APIs, see   the <cite>Toast API Developer's Guide.</cite> 

    OpenAPI spec version: 2.2.0
    Contact: integrations@toasttab.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ServiceCharge(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'guid': 'str',
        'entity_type': 'str',
        'external_id': 'str',
        'name': 'str',
        'amount_type': 'str',
        'amount': 'float',
        'percent': 'float',
        'criteria': 'ServiceChargeCriteria',
        'gratuity': 'bool',
        'taxable': 'bool',
        'applicable_taxes': 'list[TaxRate]'
    }

    attribute_map = {
        'guid': 'guid',
        'entity_type': 'entityType',
        'external_id': 'externalId',
        'name': 'name',
        'amount_type': 'amountType',
        'amount': 'amount',
        'percent': 'percent',
        'criteria': 'criteria',
        'gratuity': 'gratuity',
        'taxable': 'taxable',
        'applicable_taxes': 'applicableTaxes'
    }

    def __init__(self, guid=None, entity_type=None, external_id=None, name=None, amount_type=None, amount=None, percent=None, criteria=None, gratuity=None, taxable=None, applicable_taxes=None):
        """
        ServiceCharge - a model defined in Swagger
        """

        self._guid = None
        self._entity_type = None
        self._external_id = None
        self._name = None
        self._amount_type = None
        self._amount = None
        self._percent = None
        self._criteria = None
        self._gratuity = None
        self._taxable = None
        self._applicable_taxes = None

        self.guid = guid
        self.entity_type = entity_type
        if external_id is not None:
          self.external_id = external_id
        if name is not None:
          self.name = name
        if amount_type is not None:
          self.amount_type = amount_type
        if amount is not None:
          self.amount = amount
        if percent is not None:
          self.percent = percent
        if criteria is not None:
          self.criteria = criteria
        if gratuity is not None:
          self.gratuity = gratuity
        if taxable is not None:
          self.taxable = taxable
        if applicable_taxes is not None:
          self.applicable_taxes = applicable_taxes

    @property
    def guid(self):
        """
        Gets the guid of this ServiceCharge.
        The GUID maintained by the Toast POS.

        :return: The guid of this ServiceCharge.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """
        Sets the guid of this ServiceCharge.
        The GUID maintained by the Toast POS.

        :param guid: The guid of this ServiceCharge.
        :type: str
        """
        if guid is None:
            raise ValueError("Invalid value for `guid`, must not be `None`")

        self._guid = guid

    @property
    def entity_type(self):
        """
        Gets the entity_type of this ServiceCharge.
        The type of object this is.

        :return: The entity_type of this ServiceCharge.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """
        Sets the entity_type of this ServiceCharge.
        The type of object this is.

        :param entity_type: The entity_type of this ServiceCharge.
        :type: str
        """
        if entity_type is None:
            raise ValueError("Invalid value for `entity_type`, must not be `None`")

        self._entity_type = entity_type

    @property
    def external_id(self):
        """
        Gets the external_id of this ServiceCharge.
        External identifier string, prefixed by the naming authority.

        :return: The external_id of this ServiceCharge.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """
        Sets the external_id of this ServiceCharge.
        External identifier string, prefixed by the naming authority.

        :param external_id: The external_id of this ServiceCharge.
        :type: str
        """

        self._external_id = external_id

    @property
    def name(self):
        """
        Gets the name of this ServiceCharge.
        The name of this service charge.

        :return: The name of this ServiceCharge.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ServiceCharge.
        The name of this service charge.

        :param name: The name of this ServiceCharge.
        :type: str
        """

        self._name = name

    @property
    def amount_type(self):
        """
        Gets the amount_type of this ServiceCharge.
        The type of service charge.

        :return: The amount_type of this ServiceCharge.
        :rtype: str
        """
        return self._amount_type

    @amount_type.setter
    def amount_type(self, amount_type):
        """
        Sets the amount_type of this ServiceCharge.
        The type of service charge.

        :param amount_type: The amount_type of this ServiceCharge.
        :type: str
        """
        allowed_values = ["FIXED", "PERCENT", "OPEN"]
        if amount_type not in allowed_values:
            raise ValueError(
                "Invalid value for `amount_type` ({0}), must be one of {1}"
                .format(amount_type, allowed_values)
            )

        self._amount_type = amount_type

    @property
    def amount(self):
        """
        Gets the amount of this ServiceCharge.
        Amount in USD to be applied for `FIXED` type service charges.

        :return: The amount of this ServiceCharge.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this ServiceCharge.
        Amount in USD to be applied for `FIXED` type service charges.

        :param amount: The amount of this ServiceCharge.
        :type: float
        """

        self._amount = amount

    @property
    def percent(self):
        """
        Gets the percent of this ServiceCharge.
        Percent fee to be applied for `PERCENT` type service charges, based on pre-discount check amount. Must be a number between 0 and 100. 

        :return: The percent of this ServiceCharge.
        :rtype: float
        """
        return self._percent

    @percent.setter
    def percent(self, percent):
        """
        Sets the percent of this ServiceCharge.
        Percent fee to be applied for `PERCENT` type service charges, based on pre-discount check amount. Must be a number between 0 and 100. 

        :param percent: The percent of this ServiceCharge.
        :type: float
        """

        self._percent = percent

    @property
    def criteria(self):
        """
        Gets the criteria of this ServiceCharge.
        A reference to the ServiceChargeCriteria to determine if this service charge is applicable to a given check. See each ServiceChargeCriteria for details.

        :return: The criteria of this ServiceCharge.
        :rtype: ServiceChargeCriteria
        """
        return self._criteria

    @criteria.setter
    def criteria(self, criteria):
        """
        Sets the criteria of this ServiceCharge.
        A reference to the ServiceChargeCriteria to determine if this service charge is applicable to a given check. See each ServiceChargeCriteria for details.

        :param criteria: The criteria of this ServiceCharge.
        :type: ServiceChargeCriteria
        """

        self._criteria = criteria

    @property
    def gratuity(self):
        """
        Gets the gratuity of this ServiceCharge.
        True if the service charge is a gratuity and is assigned to the owner of the check.

        :return: The gratuity of this ServiceCharge.
        :rtype: bool
        """
        return self._gratuity

    @gratuity.setter
    def gratuity(self, gratuity):
        """
        Sets the gratuity of this ServiceCharge.
        True if the service charge is a gratuity and is assigned to the owner of the check.

        :param gratuity: The gratuity of this ServiceCharge.
        :type: bool
        """

        self._gratuity = gratuity

    @property
    def taxable(self):
        """
        Gets the taxable of this ServiceCharge.
        True if tax should be applied to the service charge.

        :return: The taxable of this ServiceCharge.
        :rtype: bool
        """
        return self._taxable

    @taxable.setter
    def taxable(self, taxable):
        """
        Sets the taxable of this ServiceCharge.
        True if tax should be applied to the service charge.

        :param taxable: The taxable of this ServiceCharge.
        :type: bool
        """

        self._taxable = taxable

    @property
    def applicable_taxes(self):
        """
        Gets the applicable_taxes of this ServiceCharge.
        A reference to the taxes applied to the service charge, if the service charge is taxable.

        :return: The applicable_taxes of this ServiceCharge.
        :rtype: list[TaxRate]
        """
        return self._applicable_taxes

    @applicable_taxes.setter
    def applicable_taxes(self, applicable_taxes):
        """
        Sets the applicable_taxes of this ServiceCharge.
        A reference to the taxes applied to the service charge, if the service charge is taxable.

        :param applicable_taxes: The applicable_taxes of this ServiceCharge.
        :type: list[TaxRate]
        """

        self._applicable_taxes = applicable_taxes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ServiceCharge):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
