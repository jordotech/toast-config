# coding: utf-8

"""
    Toast Configuration API

    ## Overview    You can use the Toast configuration API to retrieve information about   the configuration of a restaurant and its menus. This includes   menu items, menu groups, and alternate payment types, as well as   physical configuration such as cash drawers and restaurant   tables.    The configuration API does not return information about entities   that you have removed from your restaurant configuration or   archived. For example, if you remove a menu item or archive a   discount, the configuration API will not return the menu item or   discount in response data.    For more information about using this and other Toast APIs, see   the <cite>Toast API Developer's Guide.</cite> 

    OpenAPI spec version: 2.2.0
    Contact: integrations@toasttab.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Discount(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'guid': 'str',
        'entity_type': 'str',
        'name': 'str',
        'active': 'bool',
        'type': 'str',
        'percentage': 'float',
        'amount': 'float',
        'selection_type': 'str'
    }

    attribute_map = {
        'guid': 'guid',
        'entity_type': 'entityType',
        'name': 'name',
        'active': 'active',
        'type': 'type',
        'percentage': 'percentage',
        'amount': 'amount',
        'selection_type': 'selectionType'
    }

    def __init__(self, guid=None, entity_type=None, name=None, active=None, type=None, percentage=None, amount=None, selection_type=None):
        """
        Discount - a model defined in Swagger
        """

        self._guid = None
        self._entity_type = None
        self._name = None
        self._active = None
        self._type = None
        self._percentage = None
        self._amount = None
        self._selection_type = None

        self.guid = guid
        self.entity_type = entity_type
        if name is not None:
          self.name = name
        if active is not None:
          self.active = active
        if type is not None:
          self.type = type
        if percentage is not None:
          self.percentage = percentage
        if amount is not None:
          self.amount = amount
        if selection_type is not None:
          self.selection_type = selection_type

    @property
    def guid(self):
        """
        Gets the guid of this Discount.
        The GUID maintained by the Toast POS.

        :return: The guid of this Discount.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """
        Sets the guid of this Discount.
        The GUID maintained by the Toast POS.

        :param guid: The guid of this Discount.
        :type: str
        """
        if guid is None:
            raise ValueError("Invalid value for `guid`, must not be `None`")

        self._guid = guid

    @property
    def entity_type(self):
        """
        Gets the entity_type of this Discount.
        The type of object this is.

        :return: The entity_type of this Discount.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """
        Sets the entity_type of this Discount.
        The type of object this is.

        :param entity_type: The entity_type of this Discount.
        :type: str
        """
        if entity_type is None:
            raise ValueError("Invalid value for `entity_type`, must not be `None`")

        self._entity_type = entity_type

    @property
    def name(self):
        """
        Gets the name of this Discount.
        The human-readable name of the discount.

        :return: The name of this Discount.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Discount.
        The human-readable name of the discount.

        :param name: The name of this Discount.
        :type: str
        """

        self._name = name

    @property
    def active(self):
        """
        Gets the active of this Discount.
        True if this discount is currently usable.

        :return: The active of this Discount.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this Discount.
        True if this discount is currently usable.

        :param active: The active of this Discount.
        :type: bool
        """

        self._active = active

    @property
    def type(self):
        """
        Gets the type of this Discount.
        * `PERCENT` - the discount reduces the price by a percentage. * `FIXED` - the discount reduces the price by a specific amount. 

        :return: The type of this Discount.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Discount.
        * `PERCENT` - the discount reduces the price by a percentage. * `FIXED` - the discount reduces the price by a specific amount. 

        :param type: The type of this Discount.
        :type: str
        """
        allowed_values = ["PERCENT", "FIXED", "OPEN_PERCENT", "OPEN_FIXED", "BOGO", "FIXED_TOTAL"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def percentage(self):
        """
        Gets the percentage of this Discount.
        Percent discount applied when the `amountType` is `PERCENT`. This value will be greater than 0 and at most 100. 

        :return: The percentage of this Discount.
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """
        Sets the percentage of this Discount.
        Percent discount applied when the `amountType` is `PERCENT`. This value will be greater than 0 and at most 100. 

        :param percentage: The percentage of this Discount.
        :type: float
        """

        self._percentage = percentage

    @property
    def amount(self):
        """
        Gets the amount of this Discount.
        The currency amount of the discount when the `amountType` is `FIXED`. This value will be greater than 0. 

        :return: The amount of this Discount.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this Discount.
        The currency amount of the discount when the `amountType` is `FIXED`. This value will be greater than 0. 

        :param amount: The amount of this Discount.
        :type: float
        """

        self._amount = amount

    @property
    def selection_type(self):
        """
        Gets the selection_type of this Discount.
        * `CHECK` - the discount can be applied to a check. * `BOGO` - a buy one get one (BOGO) discount. * `ITEM` - the discount can be applied to an item selection in a check. 

        :return: The selection_type of this Discount.
        :rtype: str
        """
        return self._selection_type

    @selection_type.setter
    def selection_type(self, selection_type):
        """
        Sets the selection_type of this Discount.
        * `CHECK` - the discount can be applied to a check. * `BOGO` - a buy one get one (BOGO) discount. * `ITEM` - the discount can be applied to an item selection in a check. 

        :param selection_type: The selection_type of this Discount.
        :type: str
        """
        allowed_values = ["CHECK", "ITEM", "BOGO"]
        if selection_type not in allowed_values:
            raise ValueError(
                "Invalid value for `selection_type` ({0}), must be one of {1}"
                .format(selection_type, allowed_values)
            )

        self._selection_type = selection_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Discount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
