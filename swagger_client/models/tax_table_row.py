# coding: utf-8

"""
    Toast Configuration API

    ## Overview    You can use the Toast configuration API to retrieve information about   the configuration of a restaurant and its menus. This includes   menu items, menu groups, and alternate payment types, as well as   physical configuration such as cash drawers and restaurant   tables.    The configuration API does not return information about entities   that you have removed from your restaurant configuration or   archived. For example, if you remove a menu item or archive a   discount, the configuration API will not return the menu item or   discount in response data.    For more information about using this and other Toast APIs, see   the <cite>Toast API Developer's Guide.</cite> 

    OpenAPI spec version: 2.2.0
    Contact: integrations@toasttab.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TaxTableRow(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start': 'int',
        'end': 'int',
        'tax': 'int',
        'pattern': 'bool'
    }

    attribute_map = {
        'start': 'start',
        'end': 'end',
        'tax': 'tax',
        'pattern': 'pattern'
    }

    def __init__(self, start=None, end=None, tax=None, pattern=None):
        """
        TaxTableRow - a model defined in Swagger
        """

        self._start = None
        self._end = None
        self._tax = None
        self._pattern = None

        if start is not None:
          self.start = start
        if end is not None:
          self.end = end
        if tax is not None:
          self.tax = tax
        if pattern is not None:
          self.pattern = pattern

    @property
    def start(self):
        """
        Gets the start of this TaxTableRow.
        The start of a sale amount range that corresponds to a specific tax amount in a tax table.

        :return: The start of this TaxTableRow.
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """
        Sets the start of this TaxTableRow.
        The start of a sale amount range that corresponds to a specific tax amount in a tax table.

        :param start: The start of this TaxTableRow.
        :type: int
        """

        self._start = start

    @property
    def end(self):
        """
        Gets the end of this TaxTableRow.
        The end of a sale amount range that corresponds to a specific tax amount in a tax table.

        :return: The end of this TaxTableRow.
        :rtype: int
        """
        return self._end

    @end.setter
    def end(self, end):
        """
        Sets the end of this TaxTableRow.
        The end of a sale amount range that corresponds to a specific tax amount in a tax table.

        :param end: The end of this TaxTableRow.
        :type: int
        """

        self._end = end

    @property
    def tax(self):
        """
        Gets the tax of this TaxTableRow.
        The tax amount for the tax table row.

        :return: The tax of this TaxTableRow.
        :rtype: int
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """
        Sets the tax of this TaxTableRow.
        The tax amount for the tax table row.

        :param tax: The tax of this TaxTableRow.
        :type: int
        """

        self._tax = tax

    @property
    def pattern(self):
        """
        Gets the pattern of this TaxTableRow.
        Specifies whether the price range is part of an incomplete set of ranges that establish an algorithm that you can use to calculate tax amounts.

        :return: The pattern of this TaxTableRow.
        :rtype: bool
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """
        Sets the pattern of this TaxTableRow.
        Specifies whether the price range is part of an incomplete set of ranges that establish an algorithm that you can use to calculate tax amounts.

        :param pattern: The pattern of this TaxTableRow.
        :type: bool
        """

        self._pattern = pattern

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TaxTableRow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
